// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Demo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Demo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Demo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Demo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Demo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Demo_2eproto;
class Addreq;
class AddreqDefaultTypeInternal;
extern AddreqDefaultTypeInternal _Addreq_default_instance_;
class Attributeitempro;
class AttributeitemproDefaultTypeInternal;
extern AttributeitemproDefaultTypeInternal _Attributeitempro_default_instance_;
class ClientCheckMessage;
class ClientCheckMessageDefaultTypeInternal;
extern ClientCheckMessageDefaultTypeInternal _ClientCheckMessage_default_instance_;
class ClientDataChangeMessage;
class ClientDataChangeMessageDefaultTypeInternal;
extern ClientDataChangeMessageDefaultTypeInternal _ClientDataChangeMessage_default_instance_;
class ClientDataQueryMessage;
class ClientDataQueryMessageDefaultTypeInternal;
extern ClientDataQueryMessageDefaultTypeInternal _ClientDataQueryMessage_default_instance_;
class ClientMoveMessage;
class ClientMoveMessageDefaultTypeInternal;
extern ClientMoveMessageDefaultTypeInternal _ClientMoveMessage_default_instance_;
class Modelinfo;
class ModelinfoDefaultTypeInternal;
extern ModelinfoDefaultTypeInternal _Modelinfo_default_instance_;
class Packagepro;
class PackageproDefaultTypeInternal;
extern PackageproDefaultTypeInternal _Packagepro_default_instance_;
class Packagereq;
class PackagereqDefaultTypeInternal;
extern PackagereqDefaultTypeInternal _Packagereq_default_instance_;
class RegisterMessageBack;
class RegisterMessageBackDefaultTypeInternal;
extern RegisterMessageBackDefaultTypeInternal _RegisterMessageBack_default_instance_;
class RegisterMessageGateBack;
class RegisterMessageGateBackDefaultTypeInternal;
extern RegisterMessageGateBackDefaultTypeInternal _RegisterMessageGateBack_default_instance_;
class RegisterMessageOn;
class RegisterMessageOnDefaultTypeInternal;
extern RegisterMessageOnDefaultTypeInternal _RegisterMessageOn_default_instance_;
class Reqest;
class ReqestDefaultTypeInternal;
extern ReqestDefaultTypeInternal _Reqest_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Sqlplayerinfo;
class SqlplayerinfoDefaultTypeInternal;
extern SqlplayerinfoDefaultTypeInternal _Sqlplayerinfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Addreq* Arena::CreateMaybeMessage<::Addreq>(Arena*);
template<> ::Attributeitempro* Arena::CreateMaybeMessage<::Attributeitempro>(Arena*);
template<> ::ClientCheckMessage* Arena::CreateMaybeMessage<::ClientCheckMessage>(Arena*);
template<> ::ClientDataChangeMessage* Arena::CreateMaybeMessage<::ClientDataChangeMessage>(Arena*);
template<> ::ClientDataQueryMessage* Arena::CreateMaybeMessage<::ClientDataQueryMessage>(Arena*);
template<> ::ClientMoveMessage* Arena::CreateMaybeMessage<::ClientMoveMessage>(Arena*);
template<> ::Modelinfo* Arena::CreateMaybeMessage<::Modelinfo>(Arena*);
template<> ::Packagepro* Arena::CreateMaybeMessage<::Packagepro>(Arena*);
template<> ::Packagereq* Arena::CreateMaybeMessage<::Packagereq>(Arena*);
template<> ::RegisterMessageBack* Arena::CreateMaybeMessage<::RegisterMessageBack>(Arena*);
template<> ::RegisterMessageGateBack* Arena::CreateMaybeMessage<::RegisterMessageGateBack>(Arena*);
template<> ::RegisterMessageOn* Arena::CreateMaybeMessage<::RegisterMessageOn>(Arena*);
template<> ::Reqest* Arena::CreateMaybeMessage<::Reqest>(Arena*);
template<> ::Response* Arena::CreateMaybeMessage<::Response>(Arena*);
template<> ::Sqlplayerinfo* Arena::CreateMaybeMessage<::Sqlplayerinfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Reqest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Reqest) */ {
 public:
  inline Reqest() : Reqest(nullptr) {}
  virtual ~Reqest();

  Reqest(const Reqest& from);
  Reqest(Reqest&& from) noexcept
    : Reqest() {
    *this = ::std::move(from);
  }

  inline Reqest& operator=(const Reqest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reqest& operator=(Reqest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Reqest& default_instance();

  static inline const Reqest* internal_default_instance() {
    return reinterpret_cast<const Reqest*>(
               &_Reqest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Reqest& a, Reqest& b) {
    a.Swap(&b);
  }
  inline void Swap(Reqest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reqest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reqest* New() const final {
    return CreateMaybeMessage<Reqest>(nullptr);
  }

  Reqest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reqest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Reqest& from);
  void MergeFrom(const Reqest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reqest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Reqest";
  }
  protected:
  explicit Reqest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kMessageFieldNumber = 3,
  };
  // required string Name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string Password = 2;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // required string Message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:Reqest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  friend struct ::TableStruct_Demo_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kAckFieldNumber = 2,
  };
  // required int32 Uid = 1;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Ack = 2;
  bool has_ack() const;
  private:
  bool _internal_has_ack() const;
  public:
  void clear_ack();
  ::PROTOBUF_NAMESPACE_ID::int32 ack() const;
  void set_ack(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ack() const;
  void _internal_set_ack(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Response)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ack_;
  friend struct ::TableStruct_Demo_2eproto;
};
// -------------------------------------------------------------------

class Addreq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Addreq) */ {
 public:
  inline Addreq() : Addreq(nullptr) {}
  virtual ~Addreq();

  Addreq(const Addreq& from);
  Addreq(Addreq&& from) noexcept
    : Addreq() {
    *this = ::std::move(from);
  }

  inline Addreq& operator=(const Addreq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Addreq& operator=(Addreq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Addreq& default_instance();

  static inline const Addreq* internal_default_instance() {
    return reinterpret_cast<const Addreq*>(
               &_Addreq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Addreq& a, Addreq& b) {
    a.Swap(&b);
  }
  inline void Swap(Addreq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Addreq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Addreq* New() const final {
    return CreateMaybeMessage<Addreq>(nullptr);
  }

  Addreq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Addreq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Addreq& from);
  void MergeFrom(const Addreq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Addreq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Addreq";
  }
  protected:
  explicit Addreq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 9,
    kEltemtypeFieldNumber = 1,
    kValueFieldNumber = 2,
    kUidFieldNumber = 3,
    kIdFieldNumber = 4,
    kPosFieldNumber = 6,
    kUsemoneyFieldNumber = 5,
    kInuseFieldNumber = 7,
    kDropfromFieldNumber = 8,
  };
  // repeated .Modelinfo Mode = 9;
  int mode_size() const;
  private:
  int _internal_mode_size() const;
  public:
  void clear_mode();
  ::Modelinfo* mutable_mode(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Modelinfo >*
      mutable_mode();
  private:
  const ::Modelinfo& _internal_mode(int index) const;
  ::Modelinfo* _internal_add_mode();
  public:
  const ::Modelinfo& mode(int index) const;
  ::Modelinfo* add_mode();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Modelinfo >&
      mode() const;

  // required int32 Eltemtype = 1;
  bool has_eltemtype() const;
  private:
  bool _internal_has_eltemtype() const;
  public:
  void clear_eltemtype();
  ::PROTOBUF_NAMESPACE_ID::int32 eltemtype() const;
  void set_eltemtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eltemtype() const;
  void _internal_set_eltemtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Uid = 3;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Id = 4;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 Pos = 6;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  ::PROTOBUF_NAMESPACE_ID::int32 pos() const;
  void set_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pos() const;
  void _internal_set_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool Usemoney = 5;
  bool has_usemoney() const;
  private:
  bool _internal_has_usemoney() const;
  public:
  void clear_usemoney();
  bool usemoney() const;
  void set_usemoney(bool value);
  private:
  bool _internal_usemoney() const;
  void _internal_set_usemoney(bool value);
  public:

  // optional bool Inuse = 7;
  bool has_inuse() const;
  private:
  bool _internal_has_inuse() const;
  public:
  void clear_inuse();
  bool inuse() const;
  void set_inuse(bool value);
  private:
  bool _internal_inuse() const;
  void _internal_set_inuse(bool value);
  public:

  // optional bool Dropfrom = 8;
  bool has_dropfrom() const;
  private:
  bool _internal_has_dropfrom() const;
  public:
  void clear_dropfrom();
  bool dropfrom() const;
  void set_dropfrom(bool value);
  private:
  bool _internal_dropfrom() const;
  void _internal_set_dropfrom(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Addreq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Modelinfo > mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 eltemtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 pos_;
  bool usemoney_;
  bool inuse_;
  bool dropfrom_;
  friend struct ::TableStruct_Demo_2eproto;
};
// -------------------------------------------------------------------

class Packagereq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Packagereq) */ {
 public:
  inline Packagereq() : Packagereq(nullptr) {}
  virtual ~Packagereq();

  Packagereq(const Packagereq& from);
  Packagereq(Packagereq&& from) noexcept
    : Packagereq() {
    *this = ::std::move(from);
  }

  inline Packagereq& operator=(const Packagereq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packagereq& operator=(Packagereq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Packagereq& default_instance();

  static inline const Packagereq* internal_default_instance() {
    return reinterpret_cast<const Packagereq*>(
               &_Packagereq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Packagereq& a, Packagereq& b) {
    a.Swap(&b);
  }
  inline void Swap(Packagereq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packagereq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Packagereq* New() const final {
    return CreateMaybeMessage<Packagereq>(nullptr);
  }

  Packagereq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Packagereq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Packagereq& from);
  void MergeFrom(const Packagereq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packagereq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Packagereq";
  }
  protected:
  explicit Packagereq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kInitFieldNumber = 2,
  };
  // required int32 Uid = 1;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Init = 2;
  bool has_init() const;
  private:
  bool _internal_has_init() const;
  public:
  void clear_init();
  ::PROTOBUF_NAMESPACE_ID::int32 init() const;
  void set_init(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_init() const;
  void _internal_set_init(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Packagereq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 init_;
  friend struct ::TableStruct_Demo_2eproto;
};
// -------------------------------------------------------------------

class RegisterMessageOn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterMessageOn) */ {
 public:
  inline RegisterMessageOn() : RegisterMessageOn(nullptr) {}
  virtual ~RegisterMessageOn();

  RegisterMessageOn(const RegisterMessageOn& from);
  RegisterMessageOn(RegisterMessageOn&& from) noexcept
    : RegisterMessageOn() {
    *this = ::std::move(from);
  }

  inline RegisterMessageOn& operator=(const RegisterMessageOn& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterMessageOn& operator=(RegisterMessageOn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterMessageOn& default_instance();

  static inline const RegisterMessageOn* internal_default_instance() {
    return reinterpret_cast<const RegisterMessageOn*>(
               &_RegisterMessageOn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegisterMessageOn& a, RegisterMessageOn& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterMessageOn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterMessageOn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterMessageOn* New() const final {
    return CreateMaybeMessage<RegisterMessageOn>(nullptr);
  }

  RegisterMessageOn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterMessageOn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterMessageOn& from);
  void MergeFrom(const RegisterMessageOn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterMessageOn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterMessageOn";
  }
  protected:
  explicit RegisterMessageOn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // required string Username = 1;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // required string Password = 2;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:RegisterMessageOn)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  friend struct ::TableStruct_Demo_2eproto;
};
// -------------------------------------------------------------------

class RegisterMessageBack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterMessageBack) */ {
 public:
  inline RegisterMessageBack() : RegisterMessageBack(nullptr) {}
  virtual ~RegisterMessageBack();

  RegisterMessageBack(const RegisterMessageBack& from);
  RegisterMessageBack(RegisterMessageBack&& from) noexcept
    : RegisterMessageBack() {
    *this = ::std::move(from);
  }

  inline RegisterMessageBack& operator=(const RegisterMessageBack& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterMessageBack& operator=(RegisterMessageBack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterMessageBack& default_instance();

  static inline const RegisterMessageBack* internal_default_instance() {
    return reinterpret_cast<const RegisterMessageBack*>(
               &_RegisterMessageBack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RegisterMessageBack& a, RegisterMessageBack& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterMessageBack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterMessageBack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterMessageBack* New() const final {
    return CreateMaybeMessage<RegisterMessageBack>(nullptr);
  }

  RegisterMessageBack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterMessageBack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterMessageBack& from);
  void MergeFrom(const RegisterMessageBack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterMessageBack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterMessageBack";
  }
  protected:
  explicit RegisterMessageBack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddrFieldNumber = 1,
    kPortFieldNumber = 2,
    kUidFieldNumber = 3,
  };
  // required string IpAddr = 1;
  bool has_ipaddr() const;
  private:
  bool _internal_has_ipaddr() const;
  public:
  void clear_ipaddr();
  const std::string& ipaddr() const;
  void set_ipaddr(const std::string& value);
  void set_ipaddr(std::string&& value);
  void set_ipaddr(const char* value);
  void set_ipaddr(const char* value, size_t size);
  std::string* mutable_ipaddr();
  std::string* release_ipaddr();
  void set_allocated_ipaddr(std::string* ipaddr);
  private:
  const std::string& _internal_ipaddr() const;
  void _internal_set_ipaddr(const std::string& value);
  std::string* _internal_mutable_ipaddr();
  public:

  // required int32 Port = 2;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Uid = 3;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RegisterMessageBack)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipaddr_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  friend struct ::TableStruct_Demo_2eproto;
};
// -------------------------------------------------------------------

class RegisterMessageGateBack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterMessageGateBack) */ {
 public:
  inline RegisterMessageGateBack() : RegisterMessageGateBack(nullptr) {}
  virtual ~RegisterMessageGateBack();

  RegisterMessageGateBack(const RegisterMessageGateBack& from);
  RegisterMessageGateBack(RegisterMessageGateBack&& from) noexcept
    : RegisterMessageGateBack() {
    *this = ::std::move(from);
  }

  inline RegisterMessageGateBack& operator=(const RegisterMessageGateBack& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterMessageGateBack& operator=(RegisterMessageGateBack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterMessageGateBack& default_instance();

  static inline const RegisterMessageGateBack* internal_default_instance() {
    return reinterpret_cast<const RegisterMessageGateBack*>(
               &_RegisterMessageGateBack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RegisterMessageGateBack& a, RegisterMessageGateBack& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterMessageGateBack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterMessageGateBack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterMessageGateBack* New() const final {
    return CreateMaybeMessage<RegisterMessageGateBack>(nullptr);
  }

  RegisterMessageGateBack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterMessageGateBack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterMessageGateBack& from);
  void MergeFrom(const RegisterMessageGateBack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterMessageGateBack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterMessageGateBack";
  }
  protected:
  explicit RegisterMessageGateBack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // required string Password = 2;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // required int32 Uid = 1;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RegisterMessageGateBack)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  friend struct ::TableStruct_Demo_2eproto;
};
// -------------------------------------------------------------------

class ClientDataQueryMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientDataQueryMessage) */ {
 public:
  inline ClientDataQueryMessage() : ClientDataQueryMessage(nullptr) {}
  virtual ~ClientDataQueryMessage();

  ClientDataQueryMessage(const ClientDataQueryMessage& from);
  ClientDataQueryMessage(ClientDataQueryMessage&& from) noexcept
    : ClientDataQueryMessage() {
    *this = ::std::move(from);
  }

  inline ClientDataQueryMessage& operator=(const ClientDataQueryMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientDataQueryMessage& operator=(ClientDataQueryMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientDataQueryMessage& default_instance();

  static inline const ClientDataQueryMessage* internal_default_instance() {
    return reinterpret_cast<const ClientDataQueryMessage*>(
               &_ClientDataQueryMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ClientDataQueryMessage& a, ClientDataQueryMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientDataQueryMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientDataQueryMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientDataQueryMessage* New() const final {
    return CreateMaybeMessage<ClientDataQueryMessage>(nullptr);
  }

  ClientDataQueryMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientDataQueryMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientDataQueryMessage& from);
  void MergeFrom(const ClientDataQueryMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientDataQueryMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientDataQueryMessage";
  }
  protected:
  explicit ClientDataQueryMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 3,
    kUidFieldNumber = 1,
    kInitFieldNumber = 2,
  };
  // required string Password = 3;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // required int32 Uid = 1;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Init = 2;
  bool has_init() const;
  private:
  bool _internal_has_init() const;
  public:
  void clear_init();
  ::PROTOBUF_NAMESPACE_ID::int32 init() const;
  void set_init(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_init() const;
  void _internal_set_init(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientDataQueryMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 init_;
  friend struct ::TableStruct_Demo_2eproto;
};
// -------------------------------------------------------------------

class Modelinfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Modelinfo) */ {
 public:
  inline Modelinfo() : Modelinfo(nullptr) {}
  virtual ~Modelinfo();

  Modelinfo(const Modelinfo& from);
  Modelinfo(Modelinfo&& from) noexcept
    : Modelinfo() {
    *this = ::std::move(from);
  }

  inline Modelinfo& operator=(const Modelinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Modelinfo& operator=(Modelinfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Modelinfo& default_instance();

  static inline const Modelinfo* internal_default_instance() {
    return reinterpret_cast<const Modelinfo*>(
               &_Modelinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Modelinfo& a, Modelinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Modelinfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Modelinfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Modelinfo* New() const final {
    return CreateMaybeMessage<Modelinfo>(nullptr);
  }

  Modelinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Modelinfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Modelinfo& from);
  void MergeFrom(const Modelinfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Modelinfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Modelinfo";
  }
  protected:
  explicit Modelinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributetypeFieldNumber = 2,
    kAttributetypevalueFieldNumber = 3,
    kModeltypeFieldNumber = 1,
  };
  // repeated int32 Attributetype = 2;
  int attributetype_size() const;
  private:
  int _internal_attributetype_size() const;
  public:
  void clear_attributetype();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attributetype(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_attributetype() const;
  void _internal_add_attributetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_attributetype();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 attributetype(int index) const;
  void set_attributetype(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_attributetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      attributetype() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_attributetype();

  // repeated int32 Attributetypevalue = 3;
  int attributetypevalue_size() const;
  private:
  int _internal_attributetypevalue_size() const;
  public:
  void clear_attributetypevalue();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attributetypevalue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_attributetypevalue() const;
  void _internal_add_attributetypevalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_attributetypevalue();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 attributetypevalue(int index) const;
  void set_attributetypevalue(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_attributetypevalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      attributetypevalue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_attributetypevalue();

  // required int32 Modeltype = 1;
  bool has_modeltype() const;
  private:
  bool _internal_has_modeltype() const;
  public:
  void clear_modeltype();
  ::PROTOBUF_NAMESPACE_ID::int32 modeltype() const;
  void set_modeltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_modeltype() const;
  void _internal_set_modeltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Modelinfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > attributetype_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > attributetypevalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 modeltype_;
  friend struct ::TableStruct_Demo_2eproto;
};
// -------------------------------------------------------------------

class ClientDataChangeMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientDataChangeMessage) */ {
 public:
  inline ClientDataChangeMessage() : ClientDataChangeMessage(nullptr) {}
  virtual ~ClientDataChangeMessage();

  ClientDataChangeMessage(const ClientDataChangeMessage& from);
  ClientDataChangeMessage(ClientDataChangeMessage&& from) noexcept
    : ClientDataChangeMessage() {
    *this = ::std::move(from);
  }

  inline ClientDataChangeMessage& operator=(const ClientDataChangeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientDataChangeMessage& operator=(ClientDataChangeMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientDataChangeMessage& default_instance();

  static inline const ClientDataChangeMessage* internal_default_instance() {
    return reinterpret_cast<const ClientDataChangeMessage*>(
               &_ClientDataChangeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ClientDataChangeMessage& a, ClientDataChangeMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientDataChangeMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientDataChangeMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientDataChangeMessage* New() const final {
    return CreateMaybeMessage<ClientDataChangeMessage>(nullptr);
  }

  ClientDataChangeMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientDataChangeMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientDataChangeMessage& from);
  void MergeFrom(const ClientDataChangeMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientDataChangeMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientDataChangeMessage";
  }
  protected:
  explicit ClientDataChangeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 9,
    kPasswordFieldNumber = 10,
    kEltemtypeFieldNumber = 1,
    kValueFieldNumber = 2,
    kUidFieldNumber = 3,
    kIdFieldNumber = 4,
    kPosFieldNumber = 6,
    kUsemoneyFieldNumber = 5,
    kInuseFieldNumber = 7,
    kDropfromFieldNumber = 8,
  };
  // repeated .Modelinfo Mode = 9;
  int mode_size() const;
  private:
  int _internal_mode_size() const;
  public:
  void clear_mode();
  ::Modelinfo* mutable_mode(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Modelinfo >*
      mutable_mode();
  private:
  const ::Modelinfo& _internal_mode(int index) const;
  ::Modelinfo* _internal_add_mode();
  public:
  const ::Modelinfo& mode(int index) const;
  ::Modelinfo* add_mode();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Modelinfo >&
      mode() const;

  // required string Password = 10;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // required int32 Eltemtype = 1;
  bool has_eltemtype() const;
  private:
  bool _internal_has_eltemtype() const;
  public:
  void clear_eltemtype();
  ::PROTOBUF_NAMESPACE_ID::int32 eltemtype() const;
  void set_eltemtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eltemtype() const;
  void _internal_set_eltemtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Uid = 3;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Id = 4;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 Pos = 6;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  ::PROTOBUF_NAMESPACE_ID::int32 pos() const;
  void set_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pos() const;
  void _internal_set_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool Usemoney = 5;
  bool has_usemoney() const;
  private:
  bool _internal_has_usemoney() const;
  public:
  void clear_usemoney();
  bool usemoney() const;
  void set_usemoney(bool value);
  private:
  bool _internal_usemoney() const;
  void _internal_set_usemoney(bool value);
  public:

  // optional bool Inuse = 7;
  bool has_inuse() const;
  private:
  bool _internal_has_inuse() const;
  public:
  void clear_inuse();
  bool inuse() const;
  void set_inuse(bool value);
  private:
  bool _internal_inuse() const;
  void _internal_set_inuse(bool value);
  public:

  // optional bool Dropfrom = 8;
  bool has_dropfrom() const;
  private:
  bool _internal_has_dropfrom() const;
  public:
  void clear_dropfrom();
  bool dropfrom() const;
  void set_dropfrom(bool value);
  private:
  bool _internal_dropfrom() const;
  void _internal_set_dropfrom(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ClientDataChangeMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Modelinfo > mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 eltemtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 pos_;
  bool usemoney_;
  bool inuse_;
  bool dropfrom_;
  friend struct ::TableStruct_Demo_2eproto;
};
// -------------------------------------------------------------------

class ClientMoveMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientMoveMessage) */ {
 public:
  inline ClientMoveMessage() : ClientMoveMessage(nullptr) {}
  virtual ~ClientMoveMessage();

  ClientMoveMessage(const ClientMoveMessage& from);
  ClientMoveMessage(ClientMoveMessage&& from) noexcept
    : ClientMoveMessage() {
    *this = ::std::move(from);
  }

  inline ClientMoveMessage& operator=(const ClientMoveMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMoveMessage& operator=(ClientMoveMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientMoveMessage& default_instance();

  static inline const ClientMoveMessage* internal_default_instance() {
    return reinterpret_cast<const ClientMoveMessage*>(
               &_ClientMoveMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ClientMoveMessage& a, ClientMoveMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMoveMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMoveMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientMoveMessage* New() const final {
    return CreateMaybeMessage<ClientMoveMessage>(nullptr);
  }

  ClientMoveMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientMoveMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientMoveMessage& from);
  void MergeFrom(const ClientMoveMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMoveMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientMoveMessage";
  }
  protected:
  explicit ClientMoveMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 10,
    kUidFieldNumber = 1,
    kPosxFieldNumber = 2,
    kPosyFieldNumber = 3,
    kPoszFieldNumber = 4,
    kTarxFieldNumber = 5,
    kTaryFieldNumber = 6,
    kTarzFieldNumber = 7,
    kSpeedFieldNumber = 8,
    kTimeFieldNumber = 9,
  };
  // required string Password = 10;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // required int32 Uid = 1;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Posx = 2;
  bool has_posx() const;
  private:
  bool _internal_has_posx() const;
  public:
  void clear_posx();
  ::PROTOBUF_NAMESPACE_ID::int32 posx() const;
  void set_posx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_posx() const;
  void _internal_set_posx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Posy = 3;
  bool has_posy() const;
  private:
  bool _internal_has_posy() const;
  public:
  void clear_posy();
  ::PROTOBUF_NAMESPACE_ID::int32 posy() const;
  void set_posy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_posy() const;
  void _internal_set_posy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Posz = 4;
  bool has_posz() const;
  private:
  bool _internal_has_posz() const;
  public:
  void clear_posz();
  ::PROTOBUF_NAMESPACE_ID::int32 posz() const;
  void set_posz(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_posz() const;
  void _internal_set_posz(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Tarx = 5;
  bool has_tarx() const;
  private:
  bool _internal_has_tarx() const;
  public:
  void clear_tarx();
  ::PROTOBUF_NAMESPACE_ID::int32 tarx() const;
  void set_tarx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tarx() const;
  void _internal_set_tarx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Tary = 6;
  bool has_tary() const;
  private:
  bool _internal_has_tary() const;
  public:
  void clear_tary();
  ::PROTOBUF_NAMESPACE_ID::int32 tary() const;
  void set_tary(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tary() const;
  void _internal_set_tary(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Tarz = 7;
  bool has_tarz() const;
  private:
  bool _internal_has_tarz() const;
  public:
  void clear_tarz();
  ::PROTOBUF_NAMESPACE_ID::int32 tarz() const;
  void set_tarz(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tarz() const;
  void _internal_set_tarz(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Speed = 8;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 speed() const;
  void set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speed() const;
  void _internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int64 Time = 9;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientMoveMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 posx_;
  ::PROTOBUF_NAMESPACE_ID::int32 posy_;
  ::PROTOBUF_NAMESPACE_ID::int32 posz_;
  ::PROTOBUF_NAMESPACE_ID::int32 tarx_;
  ::PROTOBUF_NAMESPACE_ID::int32 tary_;
  ::PROTOBUF_NAMESPACE_ID::int32 tarz_;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  friend struct ::TableStruct_Demo_2eproto;
};
// -------------------------------------------------------------------

class ClientCheckMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCheckMessage) */ {
 public:
  inline ClientCheckMessage() : ClientCheckMessage(nullptr) {}
  virtual ~ClientCheckMessage();

  ClientCheckMessage(const ClientCheckMessage& from);
  ClientCheckMessage(ClientCheckMessage&& from) noexcept
    : ClientCheckMessage() {
    *this = ::std::move(from);
  }

  inline ClientCheckMessage& operator=(const ClientCheckMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientCheckMessage& operator=(ClientCheckMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientCheckMessage& default_instance();

  static inline const ClientCheckMessage* internal_default_instance() {
    return reinterpret_cast<const ClientCheckMessage*>(
               &_ClientCheckMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ClientCheckMessage& a, ClientCheckMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientCheckMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientCheckMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientCheckMessage* New() const final {
    return CreateMaybeMessage<ClientCheckMessage>(nullptr);
  }

  ClientCheckMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientCheckMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientCheckMessage& from);
  void MergeFrom(const ClientCheckMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientCheckMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCheckMessage";
  }
  protected:
  explicit ClientCheckMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // required string Password = 2;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // required int32 Uid = 1;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCheckMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  friend struct ::TableStruct_Demo_2eproto;
};
// -------------------------------------------------------------------

class Attributeitempro PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Attributeitempro) */ {
 public:
  inline Attributeitempro() : Attributeitempro(nullptr) {}
  virtual ~Attributeitempro();

  Attributeitempro(const Attributeitempro& from);
  Attributeitempro(Attributeitempro&& from) noexcept
    : Attributeitempro() {
    *this = ::std::move(from);
  }

  inline Attributeitempro& operator=(const Attributeitempro& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attributeitempro& operator=(Attributeitempro&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Attributeitempro& default_instance();

  static inline const Attributeitempro* internal_default_instance() {
    return reinterpret_cast<const Attributeitempro*>(
               &_Attributeitempro_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Attributeitempro& a, Attributeitempro& b) {
    a.Swap(&b);
  }
  inline void Swap(Attributeitempro* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attributeitempro* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Attributeitempro* New() const final {
    return CreateMaybeMessage<Attributeitempro>(nullptr);
  }

  Attributeitempro* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Attributeitempro>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Attributeitempro& from);
  void MergeFrom(const Attributeitempro& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attributeitempro* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Attributeitempro";
  }
  protected:
  explicit Attributeitempro(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 4,
    kIdFieldNumber = 1,
    kAmountFieldNumber = 2,
    kEltemtypeFieldNumber = 3,
  };
  // repeated int32 attribute = 4;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attribute(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_attribute() const;
  void _internal_add_attribute(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_attribute();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 attribute(int index) const;
  void set_attribute(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_attribute(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      attribute() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_attribute();

  // required int32 Id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 Amount = 2;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int32 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 Eltemtype = 3;
  bool has_eltemtype() const;
  private:
  bool _internal_has_eltemtype() const;
  public:
  void clear_eltemtype();
  ::PROTOBUF_NAMESPACE_ID::int32 eltemtype() const;
  void set_eltemtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eltemtype() const;
  void _internal_set_eltemtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Attributeitempro)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > attribute_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 amount_;
  ::PROTOBUF_NAMESPACE_ID::int32 eltemtype_;
  friend struct ::TableStruct_Demo_2eproto;
};
// -------------------------------------------------------------------

class Packagepro PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Packagepro) */ {
 public:
  inline Packagepro() : Packagepro(nullptr) {}
  virtual ~Packagepro();

  Packagepro(const Packagepro& from);
  Packagepro(Packagepro&& from) noexcept
    : Packagepro() {
    *this = ::std::move(from);
  }

  inline Packagepro& operator=(const Packagepro& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packagepro& operator=(Packagepro&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Packagepro& default_instance();

  static inline const Packagepro* internal_default_instance() {
    return reinterpret_cast<const Packagepro*>(
               &_Packagepro_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Packagepro& a, Packagepro& b) {
    a.Swap(&b);
  }
  inline void Swap(Packagepro* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packagepro* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Packagepro* New() const final {
    return CreateMaybeMessage<Packagepro>(nullptr);
  }

  Packagepro* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Packagepro>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Packagepro& from);
  void MergeFrom(const Packagepro& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packagepro* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Packagepro";
  }
  protected:
  explicit Packagepro(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemproFieldNumber = 1,
  };
  // repeated .Attributeitempro Itempro = 1;
  int itempro_size() const;
  private:
  int _internal_itempro_size() const;
  public:
  void clear_itempro();
  ::Attributeitempro* mutable_itempro(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attributeitempro >*
      mutable_itempro();
  private:
  const ::Attributeitempro& _internal_itempro(int index) const;
  ::Attributeitempro* _internal_add_itempro();
  public:
  const ::Attributeitempro& itempro(int index) const;
  ::Attributeitempro* add_itempro();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attributeitempro >&
      itempro() const;

  // @@protoc_insertion_point(class_scope:Packagepro)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attributeitempro > itempro_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Demo_2eproto;
};
// -------------------------------------------------------------------

class Sqlplayerinfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Sqlplayerinfo) */ {
 public:
  inline Sqlplayerinfo() : Sqlplayerinfo(nullptr) {}
  virtual ~Sqlplayerinfo();

  Sqlplayerinfo(const Sqlplayerinfo& from);
  Sqlplayerinfo(Sqlplayerinfo&& from) noexcept
    : Sqlplayerinfo() {
    *this = ::std::move(from);
  }

  inline Sqlplayerinfo& operator=(const Sqlplayerinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sqlplayerinfo& operator=(Sqlplayerinfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sqlplayerinfo& default_instance();

  static inline const Sqlplayerinfo* internal_default_instance() {
    return reinterpret_cast<const Sqlplayerinfo*>(
               &_Sqlplayerinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Sqlplayerinfo& a, Sqlplayerinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Sqlplayerinfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sqlplayerinfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sqlplayerinfo* New() const final {
    return CreateMaybeMessage<Sqlplayerinfo>(nullptr);
  }

  Sqlplayerinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sqlplayerinfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sqlplayerinfo& from);
  void MergeFrom(const Sqlplayerinfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sqlplayerinfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Sqlplayerinfo";
  }
  protected:
  explicit Sqlplayerinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Demo_2eproto);
    return ::descriptor_table_Demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInuseFieldNumber = 4,
    kPackageFieldNumber = 5,
    kHpFieldNumber = 1,
    kAttackFieldNumber = 2,
    kUidFieldNumber = 3,
  };
  // repeated .Attributeitempro Inuse = 4;
  int inuse_size() const;
  private:
  int _internal_inuse_size() const;
  public:
  void clear_inuse();
  ::Attributeitempro* mutable_inuse(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attributeitempro >*
      mutable_inuse();
  private:
  const ::Attributeitempro& _internal_inuse(int index) const;
  ::Attributeitempro* _internal_add_inuse();
  public:
  const ::Attributeitempro& inuse(int index) const;
  ::Attributeitempro* add_inuse();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attributeitempro >&
      inuse() const;

  // optional .Packagepro Package = 5;
  bool has_package() const;
  private:
  bool _internal_has_package() const;
  public:
  void clear_package();
  const ::Packagepro& package() const;
  ::Packagepro* release_package();
  ::Packagepro* mutable_package();
  void set_allocated_package(::Packagepro* package);
  private:
  const ::Packagepro& _internal_package() const;
  ::Packagepro* _internal_mutable_package();
  public:
  void unsafe_arena_set_allocated_package(
      ::Packagepro* package);
  ::Packagepro* unsafe_arena_release_package();

  // required int32 Hp = 1;
  bool has_hp() const;
  private:
  bool _internal_has_hp() const;
  public:
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Attack = 2;
  bool has_attack() const;
  private:
  bool _internal_has_attack() const;
  public:
  void clear_attack();
  ::PROTOBUF_NAMESPACE_ID::int32 attack() const;
  void set_attack(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attack() const;
  void _internal_set_attack(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Uid = 3;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Sqlplayerinfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attributeitempro > inuse_;
  ::Packagepro* package_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 attack_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  friend struct ::TableStruct_Demo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Reqest

// required string Name = 1;
inline bool Reqest::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Reqest::has_name() const {
  return _internal_has_name();
}
inline void Reqest::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Reqest::name() const {
  // @@protoc_insertion_point(field_get:Reqest.Name)
  return _internal_name();
}
inline void Reqest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Reqest.Name)
}
inline std::string* Reqest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Reqest.Name)
  return _internal_mutable_name();
}
inline const std::string& Reqest::_internal_name() const {
  return name_.Get();
}
inline void Reqest::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Reqest::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Reqest.Name)
}
inline void Reqest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Reqest.Name)
}
inline void Reqest::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Reqest.Name)
}
inline std::string* Reqest::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Reqest::release_name() {
  // @@protoc_insertion_point(field_release:Reqest.Name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Reqest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Reqest.Name)
}

// required string Password = 2;
inline bool Reqest::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Reqest::has_password() const {
  return _internal_has_password();
}
inline void Reqest::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Reqest::password() const {
  // @@protoc_insertion_point(field_get:Reqest.Password)
  return _internal_password();
}
inline void Reqest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:Reqest.Password)
}
inline std::string* Reqest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:Reqest.Password)
  return _internal_mutable_password();
}
inline const std::string& Reqest::_internal_password() const {
  return password_.Get();
}
inline void Reqest::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Reqest::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Reqest.Password)
}
inline void Reqest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Reqest.Password)
}
inline void Reqest::set_password(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Reqest.Password)
}
inline std::string* Reqest::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000002u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Reqest::release_password() {
  // @@protoc_insertion_point(field_release:Reqest.Password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Reqest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Reqest.Password)
}

// required string Message = 3;
inline bool Reqest::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Reqest::has_message() const {
  return _internal_has_message();
}
inline void Reqest::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Reqest::message() const {
  // @@protoc_insertion_point(field_get:Reqest.Message)
  return _internal_message();
}
inline void Reqest::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:Reqest.Message)
}
inline std::string* Reqest::mutable_message() {
  // @@protoc_insertion_point(field_mutable:Reqest.Message)
  return _internal_mutable_message();
}
inline const std::string& Reqest::_internal_message() const {
  return message_.Get();
}
inline void Reqest::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Reqest::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Reqest.Message)
}
inline void Reqest::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Reqest.Message)
}
inline void Reqest::set_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Reqest.Message)
}
inline std::string* Reqest::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000004u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Reqest::release_message() {
  // @@protoc_insertion_point(field_release:Reqest.Message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Reqest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Reqest.Message)
}

// -------------------------------------------------------------------

// Response

// required int32 Uid = 1;
inline bool Response::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response::has_uid() const {
  return _internal_has_uid();
}
inline void Response::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::uid() const {
  // @@protoc_insertion_point(field_get:Response.Uid)
  return _internal_uid();
}
inline void Response::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  uid_ = value;
}
inline void Response::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:Response.Uid)
}

// required int32 Ack = 2;
inline bool Response::_internal_has_ack() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Response::has_ack() const {
  return _internal_has_ack();
}
inline void Response::clear_ack() {
  ack_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::_internal_ack() const {
  return ack_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::ack() const {
  // @@protoc_insertion_point(field_get:Response.Ack)
  return _internal_ack();
}
inline void Response::_internal_set_ack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  ack_ = value;
}
inline void Response::set_ack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ack(value);
  // @@protoc_insertion_point(field_set:Response.Ack)
}

// -------------------------------------------------------------------

// Addreq

// required int32 Eltemtype = 1;
inline bool Addreq::_internal_has_eltemtype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Addreq::has_eltemtype() const {
  return _internal_has_eltemtype();
}
inline void Addreq::clear_eltemtype() {
  eltemtype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addreq::_internal_eltemtype() const {
  return eltemtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addreq::eltemtype() const {
  // @@protoc_insertion_point(field_get:Addreq.Eltemtype)
  return _internal_eltemtype();
}
inline void Addreq::_internal_set_eltemtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  eltemtype_ = value;
}
inline void Addreq::set_eltemtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eltemtype(value);
  // @@protoc_insertion_point(field_set:Addreq.Eltemtype)
}

// required int32 Value = 2;
inline bool Addreq::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Addreq::has_value() const {
  return _internal_has_value();
}
inline void Addreq::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addreq::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addreq::value() const {
  // @@protoc_insertion_point(field_get:Addreq.Value)
  return _internal_value();
}
inline void Addreq::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void Addreq::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Addreq.Value)
}

// required int32 Uid = 3;
inline bool Addreq::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Addreq::has_uid() const {
  return _internal_has_uid();
}
inline void Addreq::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addreq::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addreq::uid() const {
  // @@protoc_insertion_point(field_get:Addreq.Uid)
  return _internal_uid();
}
inline void Addreq::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  uid_ = value;
}
inline void Addreq::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:Addreq.Uid)
}

// required int32 Id = 4;
inline bool Addreq::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Addreq::has_id() const {
  return _internal_has_id();
}
inline void Addreq::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addreq::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addreq::id() const {
  // @@protoc_insertion_point(field_get:Addreq.Id)
  return _internal_id();
}
inline void Addreq::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void Addreq::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Addreq.Id)
}

// optional bool Usemoney = 5;
inline bool Addreq::_internal_has_usemoney() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Addreq::has_usemoney() const {
  return _internal_has_usemoney();
}
inline void Addreq::clear_usemoney() {
  usemoney_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Addreq::_internal_usemoney() const {
  return usemoney_;
}
inline bool Addreq::usemoney() const {
  // @@protoc_insertion_point(field_get:Addreq.Usemoney)
  return _internal_usemoney();
}
inline void Addreq::_internal_set_usemoney(bool value) {
  _has_bits_[0] |= 0x00000020u;
  usemoney_ = value;
}
inline void Addreq::set_usemoney(bool value) {
  _internal_set_usemoney(value);
  // @@protoc_insertion_point(field_set:Addreq.Usemoney)
}

// optional int32 Pos = 6;
inline bool Addreq::_internal_has_pos() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Addreq::has_pos() const {
  return _internal_has_pos();
}
inline void Addreq::clear_pos() {
  pos_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addreq::_internal_pos() const {
  return pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addreq::pos() const {
  // @@protoc_insertion_point(field_get:Addreq.Pos)
  return _internal_pos();
}
inline void Addreq::_internal_set_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  pos_ = value;
}
inline void Addreq::set_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:Addreq.Pos)
}

// optional bool Inuse = 7;
inline bool Addreq::_internal_has_inuse() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Addreq::has_inuse() const {
  return _internal_has_inuse();
}
inline void Addreq::clear_inuse() {
  inuse_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Addreq::_internal_inuse() const {
  return inuse_;
}
inline bool Addreq::inuse() const {
  // @@protoc_insertion_point(field_get:Addreq.Inuse)
  return _internal_inuse();
}
inline void Addreq::_internal_set_inuse(bool value) {
  _has_bits_[0] |= 0x00000040u;
  inuse_ = value;
}
inline void Addreq::set_inuse(bool value) {
  _internal_set_inuse(value);
  // @@protoc_insertion_point(field_set:Addreq.Inuse)
}

// optional bool Dropfrom = 8;
inline bool Addreq::_internal_has_dropfrom() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Addreq::has_dropfrom() const {
  return _internal_has_dropfrom();
}
inline void Addreq::clear_dropfrom() {
  dropfrom_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Addreq::_internal_dropfrom() const {
  return dropfrom_;
}
inline bool Addreq::dropfrom() const {
  // @@protoc_insertion_point(field_get:Addreq.Dropfrom)
  return _internal_dropfrom();
}
inline void Addreq::_internal_set_dropfrom(bool value) {
  _has_bits_[0] |= 0x00000080u;
  dropfrom_ = value;
}
inline void Addreq::set_dropfrom(bool value) {
  _internal_set_dropfrom(value);
  // @@protoc_insertion_point(field_set:Addreq.Dropfrom)
}

// repeated .Modelinfo Mode = 9;
inline int Addreq::_internal_mode_size() const {
  return mode_.size();
}
inline int Addreq::mode_size() const {
  return _internal_mode_size();
}
inline void Addreq::clear_mode() {
  mode_.Clear();
}
inline ::Modelinfo* Addreq::mutable_mode(int index) {
  // @@protoc_insertion_point(field_mutable:Addreq.Mode)
  return mode_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Modelinfo >*
Addreq::mutable_mode() {
  // @@protoc_insertion_point(field_mutable_list:Addreq.Mode)
  return &mode_;
}
inline const ::Modelinfo& Addreq::_internal_mode(int index) const {
  return mode_.Get(index);
}
inline const ::Modelinfo& Addreq::mode(int index) const {
  // @@protoc_insertion_point(field_get:Addreq.Mode)
  return _internal_mode(index);
}
inline ::Modelinfo* Addreq::_internal_add_mode() {
  return mode_.Add();
}
inline ::Modelinfo* Addreq::add_mode() {
  // @@protoc_insertion_point(field_add:Addreq.Mode)
  return _internal_add_mode();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Modelinfo >&
Addreq::mode() const {
  // @@protoc_insertion_point(field_list:Addreq.Mode)
  return mode_;
}

// -------------------------------------------------------------------

// Packagereq

// required int32 Uid = 1;
inline bool Packagereq::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Packagereq::has_uid() const {
  return _internal_has_uid();
}
inline void Packagereq::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Packagereq::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Packagereq::uid() const {
  // @@protoc_insertion_point(field_get:Packagereq.Uid)
  return _internal_uid();
}
inline void Packagereq::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  uid_ = value;
}
inline void Packagereq::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:Packagereq.Uid)
}

// required int32 Init = 2;
inline bool Packagereq::_internal_has_init() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Packagereq::has_init() const {
  return _internal_has_init();
}
inline void Packagereq::clear_init() {
  init_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Packagereq::_internal_init() const {
  return init_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Packagereq::init() const {
  // @@protoc_insertion_point(field_get:Packagereq.Init)
  return _internal_init();
}
inline void Packagereq::_internal_set_init(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  init_ = value;
}
inline void Packagereq::set_init(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_init(value);
  // @@protoc_insertion_point(field_set:Packagereq.Init)
}

// -------------------------------------------------------------------

// RegisterMessageOn

// required string Username = 1;
inline bool RegisterMessageOn::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegisterMessageOn::has_username() const {
  return _internal_has_username();
}
inline void RegisterMessageOn::clear_username() {
  username_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegisterMessageOn::username() const {
  // @@protoc_insertion_point(field_get:RegisterMessageOn.Username)
  return _internal_username();
}
inline void RegisterMessageOn::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:RegisterMessageOn.Username)
}
inline std::string* RegisterMessageOn::mutable_username() {
  // @@protoc_insertion_point(field_mutable:RegisterMessageOn.Username)
  return _internal_mutable_username();
}
inline const std::string& RegisterMessageOn::_internal_username() const {
  return username_.Get();
}
inline void RegisterMessageOn::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterMessageOn::set_username(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RegisterMessageOn.Username)
}
inline void RegisterMessageOn::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:RegisterMessageOn.Username)
}
inline void RegisterMessageOn::set_username(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RegisterMessageOn.Username)
}
inline std::string* RegisterMessageOn::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterMessageOn::release_username() {
  // @@protoc_insertion_point(field_release:RegisterMessageOn.Username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return username_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterMessageOn::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RegisterMessageOn.Username)
}

// required string Password = 2;
inline bool RegisterMessageOn::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegisterMessageOn::has_password() const {
  return _internal_has_password();
}
inline void RegisterMessageOn::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RegisterMessageOn::password() const {
  // @@protoc_insertion_point(field_get:RegisterMessageOn.Password)
  return _internal_password();
}
inline void RegisterMessageOn::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:RegisterMessageOn.Password)
}
inline std::string* RegisterMessageOn::mutable_password() {
  // @@protoc_insertion_point(field_mutable:RegisterMessageOn.Password)
  return _internal_mutable_password();
}
inline const std::string& RegisterMessageOn::_internal_password() const {
  return password_.Get();
}
inline void RegisterMessageOn::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterMessageOn::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RegisterMessageOn.Password)
}
inline void RegisterMessageOn::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:RegisterMessageOn.Password)
}
inline void RegisterMessageOn::set_password(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RegisterMessageOn.Password)
}
inline std::string* RegisterMessageOn::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000002u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterMessageOn::release_password() {
  // @@protoc_insertion_point(field_release:RegisterMessageOn.Password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterMessageOn::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RegisterMessageOn.Password)
}

// -------------------------------------------------------------------

// RegisterMessageBack

// required string IpAddr = 1;
inline bool RegisterMessageBack::_internal_has_ipaddr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegisterMessageBack::has_ipaddr() const {
  return _internal_has_ipaddr();
}
inline void RegisterMessageBack::clear_ipaddr() {
  ipaddr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegisterMessageBack::ipaddr() const {
  // @@protoc_insertion_point(field_get:RegisterMessageBack.IpAddr)
  return _internal_ipaddr();
}
inline void RegisterMessageBack::set_ipaddr(const std::string& value) {
  _internal_set_ipaddr(value);
  // @@protoc_insertion_point(field_set:RegisterMessageBack.IpAddr)
}
inline std::string* RegisterMessageBack::mutable_ipaddr() {
  // @@protoc_insertion_point(field_mutable:RegisterMessageBack.IpAddr)
  return _internal_mutable_ipaddr();
}
inline const std::string& RegisterMessageBack::_internal_ipaddr() const {
  return ipaddr_.Get();
}
inline void RegisterMessageBack::_internal_set_ipaddr(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ipaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterMessageBack::set_ipaddr(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ipaddr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RegisterMessageBack.IpAddr)
}
inline void RegisterMessageBack::set_ipaddr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ipaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:RegisterMessageBack.IpAddr)
}
inline void RegisterMessageBack::set_ipaddr(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ipaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RegisterMessageBack.IpAddr)
}
inline std::string* RegisterMessageBack::_internal_mutable_ipaddr() {
  _has_bits_[0] |= 0x00000001u;
  return ipaddr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterMessageBack::release_ipaddr() {
  // @@protoc_insertion_point(field_release:RegisterMessageBack.IpAddr)
  if (!_internal_has_ipaddr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ipaddr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterMessageBack::set_allocated_ipaddr(std::string* ipaddr) {
  if (ipaddr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ipaddr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipaddr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RegisterMessageBack.IpAddr)
}

// required int32 Port = 2;
inline bool RegisterMessageBack::_internal_has_port() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegisterMessageBack::has_port() const {
  return _internal_has_port();
}
inline void RegisterMessageBack::clear_port() {
  port_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterMessageBack::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterMessageBack::port() const {
  // @@protoc_insertion_point(field_get:RegisterMessageBack.Port)
  return _internal_port();
}
inline void RegisterMessageBack::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  port_ = value;
}
inline void RegisterMessageBack::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:RegisterMessageBack.Port)
}

// required int32 Uid = 3;
inline bool RegisterMessageBack::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RegisterMessageBack::has_uid() const {
  return _internal_has_uid();
}
inline void RegisterMessageBack::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterMessageBack::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterMessageBack::uid() const {
  // @@protoc_insertion_point(field_get:RegisterMessageBack.Uid)
  return _internal_uid();
}
inline void RegisterMessageBack::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  uid_ = value;
}
inline void RegisterMessageBack::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:RegisterMessageBack.Uid)
}

// -------------------------------------------------------------------

// RegisterMessageGateBack

// required int32 Uid = 1;
inline bool RegisterMessageGateBack::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegisterMessageGateBack::has_uid() const {
  return _internal_has_uid();
}
inline void RegisterMessageGateBack::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterMessageGateBack::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterMessageGateBack::uid() const {
  // @@protoc_insertion_point(field_get:RegisterMessageGateBack.Uid)
  return _internal_uid();
}
inline void RegisterMessageGateBack::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  uid_ = value;
}
inline void RegisterMessageGateBack::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:RegisterMessageGateBack.Uid)
}

// required string Password = 2;
inline bool RegisterMessageGateBack::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegisterMessageGateBack::has_password() const {
  return _internal_has_password();
}
inline void RegisterMessageGateBack::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegisterMessageGateBack::password() const {
  // @@protoc_insertion_point(field_get:RegisterMessageGateBack.Password)
  return _internal_password();
}
inline void RegisterMessageGateBack::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:RegisterMessageGateBack.Password)
}
inline std::string* RegisterMessageGateBack::mutable_password() {
  // @@protoc_insertion_point(field_mutable:RegisterMessageGateBack.Password)
  return _internal_mutable_password();
}
inline const std::string& RegisterMessageGateBack::_internal_password() const {
  return password_.Get();
}
inline void RegisterMessageGateBack::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterMessageGateBack::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RegisterMessageGateBack.Password)
}
inline void RegisterMessageGateBack::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:RegisterMessageGateBack.Password)
}
inline void RegisterMessageGateBack::set_password(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RegisterMessageGateBack.Password)
}
inline std::string* RegisterMessageGateBack::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000001u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterMessageGateBack::release_password() {
  // @@protoc_insertion_point(field_release:RegisterMessageGateBack.Password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterMessageGateBack::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RegisterMessageGateBack.Password)
}

// -------------------------------------------------------------------

// ClientDataQueryMessage

// required int32 Uid = 1;
inline bool ClientDataQueryMessage::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientDataQueryMessage::has_uid() const {
  return _internal_has_uid();
}
inline void ClientDataQueryMessage::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientDataQueryMessage::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientDataQueryMessage::uid() const {
  // @@protoc_insertion_point(field_get:ClientDataQueryMessage.Uid)
  return _internal_uid();
}
inline void ClientDataQueryMessage::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  uid_ = value;
}
inline void ClientDataQueryMessage::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:ClientDataQueryMessage.Uid)
}

// required int32 Init = 2;
inline bool ClientDataQueryMessage::_internal_has_init() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientDataQueryMessage::has_init() const {
  return _internal_has_init();
}
inline void ClientDataQueryMessage::clear_init() {
  init_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientDataQueryMessage::_internal_init() const {
  return init_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientDataQueryMessage::init() const {
  // @@protoc_insertion_point(field_get:ClientDataQueryMessage.Init)
  return _internal_init();
}
inline void ClientDataQueryMessage::_internal_set_init(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  init_ = value;
}
inline void ClientDataQueryMessage::set_init(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_init(value);
  // @@protoc_insertion_point(field_set:ClientDataQueryMessage.Init)
}

// required string Password = 3;
inline bool ClientDataQueryMessage::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientDataQueryMessage::has_password() const {
  return _internal_has_password();
}
inline void ClientDataQueryMessage::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientDataQueryMessage::password() const {
  // @@protoc_insertion_point(field_get:ClientDataQueryMessage.Password)
  return _internal_password();
}
inline void ClientDataQueryMessage::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:ClientDataQueryMessage.Password)
}
inline std::string* ClientDataQueryMessage::mutable_password() {
  // @@protoc_insertion_point(field_mutable:ClientDataQueryMessage.Password)
  return _internal_mutable_password();
}
inline const std::string& ClientDataQueryMessage::_internal_password() const {
  return password_.Get();
}
inline void ClientDataQueryMessage::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClientDataQueryMessage::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientDataQueryMessage.Password)
}
inline void ClientDataQueryMessage::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientDataQueryMessage.Password)
}
inline void ClientDataQueryMessage::set_password(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientDataQueryMessage.Password)
}
inline std::string* ClientDataQueryMessage::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000001u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClientDataQueryMessage::release_password() {
  // @@protoc_insertion_point(field_release:ClientDataQueryMessage.Password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientDataQueryMessage::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientDataQueryMessage.Password)
}

// -------------------------------------------------------------------

// Modelinfo

// required int32 Modeltype = 1;
inline bool Modelinfo::_internal_has_modeltype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Modelinfo::has_modeltype() const {
  return _internal_has_modeltype();
}
inline void Modelinfo::clear_modeltype() {
  modeltype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Modelinfo::_internal_modeltype() const {
  return modeltype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Modelinfo::modeltype() const {
  // @@protoc_insertion_point(field_get:Modelinfo.Modeltype)
  return _internal_modeltype();
}
inline void Modelinfo::_internal_set_modeltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  modeltype_ = value;
}
inline void Modelinfo::set_modeltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_modeltype(value);
  // @@protoc_insertion_point(field_set:Modelinfo.Modeltype)
}

// repeated int32 Attributetype = 2;
inline int Modelinfo::_internal_attributetype_size() const {
  return attributetype_.size();
}
inline int Modelinfo::attributetype_size() const {
  return _internal_attributetype_size();
}
inline void Modelinfo::clear_attributetype() {
  attributetype_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Modelinfo::_internal_attributetype(int index) const {
  return attributetype_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Modelinfo::attributetype(int index) const {
  // @@protoc_insertion_point(field_get:Modelinfo.Attributetype)
  return _internal_attributetype(index);
}
inline void Modelinfo::set_attributetype(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  attributetype_.Set(index, value);
  // @@protoc_insertion_point(field_set:Modelinfo.Attributetype)
}
inline void Modelinfo::_internal_add_attributetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  attributetype_.Add(value);
}
inline void Modelinfo::add_attributetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_attributetype(value);
  // @@protoc_insertion_point(field_add:Modelinfo.Attributetype)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Modelinfo::_internal_attributetype() const {
  return attributetype_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Modelinfo::attributetype() const {
  // @@protoc_insertion_point(field_list:Modelinfo.Attributetype)
  return _internal_attributetype();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Modelinfo::_internal_mutable_attributetype() {
  return &attributetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Modelinfo::mutable_attributetype() {
  // @@protoc_insertion_point(field_mutable_list:Modelinfo.Attributetype)
  return _internal_mutable_attributetype();
}

// repeated int32 Attributetypevalue = 3;
inline int Modelinfo::_internal_attributetypevalue_size() const {
  return attributetypevalue_.size();
}
inline int Modelinfo::attributetypevalue_size() const {
  return _internal_attributetypevalue_size();
}
inline void Modelinfo::clear_attributetypevalue() {
  attributetypevalue_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Modelinfo::_internal_attributetypevalue(int index) const {
  return attributetypevalue_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Modelinfo::attributetypevalue(int index) const {
  // @@protoc_insertion_point(field_get:Modelinfo.Attributetypevalue)
  return _internal_attributetypevalue(index);
}
inline void Modelinfo::set_attributetypevalue(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  attributetypevalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:Modelinfo.Attributetypevalue)
}
inline void Modelinfo::_internal_add_attributetypevalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  attributetypevalue_.Add(value);
}
inline void Modelinfo::add_attributetypevalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_attributetypevalue(value);
  // @@protoc_insertion_point(field_add:Modelinfo.Attributetypevalue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Modelinfo::_internal_attributetypevalue() const {
  return attributetypevalue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Modelinfo::attributetypevalue() const {
  // @@protoc_insertion_point(field_list:Modelinfo.Attributetypevalue)
  return _internal_attributetypevalue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Modelinfo::_internal_mutable_attributetypevalue() {
  return &attributetypevalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Modelinfo::mutable_attributetypevalue() {
  // @@protoc_insertion_point(field_mutable_list:Modelinfo.Attributetypevalue)
  return _internal_mutable_attributetypevalue();
}

// -------------------------------------------------------------------

// ClientDataChangeMessage

// required int32 Eltemtype = 1;
inline bool ClientDataChangeMessage::_internal_has_eltemtype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientDataChangeMessage::has_eltemtype() const {
  return _internal_has_eltemtype();
}
inline void ClientDataChangeMessage::clear_eltemtype() {
  eltemtype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientDataChangeMessage::_internal_eltemtype() const {
  return eltemtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientDataChangeMessage::eltemtype() const {
  // @@protoc_insertion_point(field_get:ClientDataChangeMessage.Eltemtype)
  return _internal_eltemtype();
}
inline void ClientDataChangeMessage::_internal_set_eltemtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  eltemtype_ = value;
}
inline void ClientDataChangeMessage::set_eltemtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eltemtype(value);
  // @@protoc_insertion_point(field_set:ClientDataChangeMessage.Eltemtype)
}

// required int32 Value = 2;
inline bool ClientDataChangeMessage::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientDataChangeMessage::has_value() const {
  return _internal_has_value();
}
inline void ClientDataChangeMessage::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientDataChangeMessage::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientDataChangeMessage::value() const {
  // @@protoc_insertion_point(field_get:ClientDataChangeMessage.Value)
  return _internal_value();
}
inline void ClientDataChangeMessage::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  value_ = value;
}
inline void ClientDataChangeMessage::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:ClientDataChangeMessage.Value)
}

// required int32 Uid = 3;
inline bool ClientDataChangeMessage::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientDataChangeMessage::has_uid() const {
  return _internal_has_uid();
}
inline void ClientDataChangeMessage::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientDataChangeMessage::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientDataChangeMessage::uid() const {
  // @@protoc_insertion_point(field_get:ClientDataChangeMessage.Uid)
  return _internal_uid();
}
inline void ClientDataChangeMessage::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  uid_ = value;
}
inline void ClientDataChangeMessage::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:ClientDataChangeMessage.Uid)
}

// required int32 Id = 4;
inline bool ClientDataChangeMessage::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClientDataChangeMessage::has_id() const {
  return _internal_has_id();
}
inline void ClientDataChangeMessage::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientDataChangeMessage::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientDataChangeMessage::id() const {
  // @@protoc_insertion_point(field_get:ClientDataChangeMessage.Id)
  return _internal_id();
}
inline void ClientDataChangeMessage::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void ClientDataChangeMessage::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ClientDataChangeMessage.Id)
}

// optional bool Usemoney = 5;
inline bool ClientDataChangeMessage::_internal_has_usemoney() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ClientDataChangeMessage::has_usemoney() const {
  return _internal_has_usemoney();
}
inline void ClientDataChangeMessage::clear_usemoney() {
  usemoney_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ClientDataChangeMessage::_internal_usemoney() const {
  return usemoney_;
}
inline bool ClientDataChangeMessage::usemoney() const {
  // @@protoc_insertion_point(field_get:ClientDataChangeMessage.Usemoney)
  return _internal_usemoney();
}
inline void ClientDataChangeMessage::_internal_set_usemoney(bool value) {
  _has_bits_[0] |= 0x00000040u;
  usemoney_ = value;
}
inline void ClientDataChangeMessage::set_usemoney(bool value) {
  _internal_set_usemoney(value);
  // @@protoc_insertion_point(field_set:ClientDataChangeMessage.Usemoney)
}

// optional int32 Pos = 6;
inline bool ClientDataChangeMessage::_internal_has_pos() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ClientDataChangeMessage::has_pos() const {
  return _internal_has_pos();
}
inline void ClientDataChangeMessage::clear_pos() {
  pos_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientDataChangeMessage::_internal_pos() const {
  return pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientDataChangeMessage::pos() const {
  // @@protoc_insertion_point(field_get:ClientDataChangeMessage.Pos)
  return _internal_pos();
}
inline void ClientDataChangeMessage::_internal_set_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  pos_ = value;
}
inline void ClientDataChangeMessage::set_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:ClientDataChangeMessage.Pos)
}

// optional bool Inuse = 7;
inline bool ClientDataChangeMessage::_internal_has_inuse() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ClientDataChangeMessage::has_inuse() const {
  return _internal_has_inuse();
}
inline void ClientDataChangeMessage::clear_inuse() {
  inuse_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ClientDataChangeMessage::_internal_inuse() const {
  return inuse_;
}
inline bool ClientDataChangeMessage::inuse() const {
  // @@protoc_insertion_point(field_get:ClientDataChangeMessage.Inuse)
  return _internal_inuse();
}
inline void ClientDataChangeMessage::_internal_set_inuse(bool value) {
  _has_bits_[0] |= 0x00000080u;
  inuse_ = value;
}
inline void ClientDataChangeMessage::set_inuse(bool value) {
  _internal_set_inuse(value);
  // @@protoc_insertion_point(field_set:ClientDataChangeMessage.Inuse)
}

// optional bool Dropfrom = 8;
inline bool ClientDataChangeMessage::_internal_has_dropfrom() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ClientDataChangeMessage::has_dropfrom() const {
  return _internal_has_dropfrom();
}
inline void ClientDataChangeMessage::clear_dropfrom() {
  dropfrom_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ClientDataChangeMessage::_internal_dropfrom() const {
  return dropfrom_;
}
inline bool ClientDataChangeMessage::dropfrom() const {
  // @@protoc_insertion_point(field_get:ClientDataChangeMessage.Dropfrom)
  return _internal_dropfrom();
}
inline void ClientDataChangeMessage::_internal_set_dropfrom(bool value) {
  _has_bits_[0] |= 0x00000100u;
  dropfrom_ = value;
}
inline void ClientDataChangeMessage::set_dropfrom(bool value) {
  _internal_set_dropfrom(value);
  // @@protoc_insertion_point(field_set:ClientDataChangeMessage.Dropfrom)
}

// repeated .Modelinfo Mode = 9;
inline int ClientDataChangeMessage::_internal_mode_size() const {
  return mode_.size();
}
inline int ClientDataChangeMessage::mode_size() const {
  return _internal_mode_size();
}
inline void ClientDataChangeMessage::clear_mode() {
  mode_.Clear();
}
inline ::Modelinfo* ClientDataChangeMessage::mutable_mode(int index) {
  // @@protoc_insertion_point(field_mutable:ClientDataChangeMessage.Mode)
  return mode_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Modelinfo >*
ClientDataChangeMessage::mutable_mode() {
  // @@protoc_insertion_point(field_mutable_list:ClientDataChangeMessage.Mode)
  return &mode_;
}
inline const ::Modelinfo& ClientDataChangeMessage::_internal_mode(int index) const {
  return mode_.Get(index);
}
inline const ::Modelinfo& ClientDataChangeMessage::mode(int index) const {
  // @@protoc_insertion_point(field_get:ClientDataChangeMessage.Mode)
  return _internal_mode(index);
}
inline ::Modelinfo* ClientDataChangeMessage::_internal_add_mode() {
  return mode_.Add();
}
inline ::Modelinfo* ClientDataChangeMessage::add_mode() {
  // @@protoc_insertion_point(field_add:ClientDataChangeMessage.Mode)
  return _internal_add_mode();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Modelinfo >&
ClientDataChangeMessage::mode() const {
  // @@protoc_insertion_point(field_list:ClientDataChangeMessage.Mode)
  return mode_;
}

// required string Password = 10;
inline bool ClientDataChangeMessage::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientDataChangeMessage::has_password() const {
  return _internal_has_password();
}
inline void ClientDataChangeMessage::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientDataChangeMessage::password() const {
  // @@protoc_insertion_point(field_get:ClientDataChangeMessage.Password)
  return _internal_password();
}
inline void ClientDataChangeMessage::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:ClientDataChangeMessage.Password)
}
inline std::string* ClientDataChangeMessage::mutable_password() {
  // @@protoc_insertion_point(field_mutable:ClientDataChangeMessage.Password)
  return _internal_mutable_password();
}
inline const std::string& ClientDataChangeMessage::_internal_password() const {
  return password_.Get();
}
inline void ClientDataChangeMessage::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClientDataChangeMessage::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientDataChangeMessage.Password)
}
inline void ClientDataChangeMessage::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientDataChangeMessage.Password)
}
inline void ClientDataChangeMessage::set_password(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientDataChangeMessage.Password)
}
inline std::string* ClientDataChangeMessage::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000001u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClientDataChangeMessage::release_password() {
  // @@protoc_insertion_point(field_release:ClientDataChangeMessage.Password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientDataChangeMessage::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientDataChangeMessage.Password)
}

// -------------------------------------------------------------------

// ClientMoveMessage

// required int32 Uid = 1;
inline bool ClientMoveMessage::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientMoveMessage::has_uid() const {
  return _internal_has_uid();
}
inline void ClientMoveMessage::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMoveMessage::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMoveMessage::uid() const {
  // @@protoc_insertion_point(field_get:ClientMoveMessage.Uid)
  return _internal_uid();
}
inline void ClientMoveMessage::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  uid_ = value;
}
inline void ClientMoveMessage::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:ClientMoveMessage.Uid)
}

// required int32 Posx = 2;
inline bool ClientMoveMessage::_internal_has_posx() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientMoveMessage::has_posx() const {
  return _internal_has_posx();
}
inline void ClientMoveMessage::clear_posx() {
  posx_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMoveMessage::_internal_posx() const {
  return posx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMoveMessage::posx() const {
  // @@protoc_insertion_point(field_get:ClientMoveMessage.Posx)
  return _internal_posx();
}
inline void ClientMoveMessage::_internal_set_posx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  posx_ = value;
}
inline void ClientMoveMessage::set_posx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:ClientMoveMessage.Posx)
}

// required int32 Posy = 3;
inline bool ClientMoveMessage::_internal_has_posy() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientMoveMessage::has_posy() const {
  return _internal_has_posy();
}
inline void ClientMoveMessage::clear_posy() {
  posy_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMoveMessage::_internal_posy() const {
  return posy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMoveMessage::posy() const {
  // @@protoc_insertion_point(field_get:ClientMoveMessage.Posy)
  return _internal_posy();
}
inline void ClientMoveMessage::_internal_set_posy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  posy_ = value;
}
inline void ClientMoveMessage::set_posy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:ClientMoveMessage.Posy)
}

// required int32 Posz = 4;
inline bool ClientMoveMessage::_internal_has_posz() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClientMoveMessage::has_posz() const {
  return _internal_has_posz();
}
inline void ClientMoveMessage::clear_posz() {
  posz_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMoveMessage::_internal_posz() const {
  return posz_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMoveMessage::posz() const {
  // @@protoc_insertion_point(field_get:ClientMoveMessage.Posz)
  return _internal_posz();
}
inline void ClientMoveMessage::_internal_set_posz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  posz_ = value;
}
inline void ClientMoveMessage::set_posz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_posz(value);
  // @@protoc_insertion_point(field_set:ClientMoveMessage.Posz)
}

// required int32 Tarx = 5;
inline bool ClientMoveMessage::_internal_has_tarx() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ClientMoveMessage::has_tarx() const {
  return _internal_has_tarx();
}
inline void ClientMoveMessage::clear_tarx() {
  tarx_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMoveMessage::_internal_tarx() const {
  return tarx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMoveMessage::tarx() const {
  // @@protoc_insertion_point(field_get:ClientMoveMessage.Tarx)
  return _internal_tarx();
}
inline void ClientMoveMessage::_internal_set_tarx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  tarx_ = value;
}
inline void ClientMoveMessage::set_tarx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tarx(value);
  // @@protoc_insertion_point(field_set:ClientMoveMessage.Tarx)
}

// required int32 Tary = 6;
inline bool ClientMoveMessage::_internal_has_tary() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ClientMoveMessage::has_tary() const {
  return _internal_has_tary();
}
inline void ClientMoveMessage::clear_tary() {
  tary_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMoveMessage::_internal_tary() const {
  return tary_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMoveMessage::tary() const {
  // @@protoc_insertion_point(field_get:ClientMoveMessage.Tary)
  return _internal_tary();
}
inline void ClientMoveMessage::_internal_set_tary(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  tary_ = value;
}
inline void ClientMoveMessage::set_tary(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tary(value);
  // @@protoc_insertion_point(field_set:ClientMoveMessage.Tary)
}

// required int32 Tarz = 7;
inline bool ClientMoveMessage::_internal_has_tarz() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ClientMoveMessage::has_tarz() const {
  return _internal_has_tarz();
}
inline void ClientMoveMessage::clear_tarz() {
  tarz_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMoveMessage::_internal_tarz() const {
  return tarz_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMoveMessage::tarz() const {
  // @@protoc_insertion_point(field_get:ClientMoveMessage.Tarz)
  return _internal_tarz();
}
inline void ClientMoveMessage::_internal_set_tarz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  tarz_ = value;
}
inline void ClientMoveMessage::set_tarz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tarz(value);
  // @@protoc_insertion_point(field_set:ClientMoveMessage.Tarz)
}

// required int32 Speed = 8;
inline bool ClientMoveMessage::_internal_has_speed() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ClientMoveMessage::has_speed() const {
  return _internal_has_speed();
}
inline void ClientMoveMessage::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMoveMessage::_internal_speed() const {
  return speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMoveMessage::speed() const {
  // @@protoc_insertion_point(field_get:ClientMoveMessage.Speed)
  return _internal_speed();
}
inline void ClientMoveMessage::_internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  speed_ = value;
}
inline void ClientMoveMessage::set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:ClientMoveMessage.Speed)
}

// required int64 Time = 9;
inline bool ClientMoveMessage::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ClientMoveMessage::has_time() const {
  return _internal_has_time();
}
inline void ClientMoveMessage::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClientMoveMessage::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClientMoveMessage::time() const {
  // @@protoc_insertion_point(field_get:ClientMoveMessage.Time)
  return _internal_time();
}
inline void ClientMoveMessage::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  time_ = value;
}
inline void ClientMoveMessage::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:ClientMoveMessage.Time)
}

// required string Password = 10;
inline bool ClientMoveMessage::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientMoveMessage::has_password() const {
  return _internal_has_password();
}
inline void ClientMoveMessage::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientMoveMessage::password() const {
  // @@protoc_insertion_point(field_get:ClientMoveMessage.Password)
  return _internal_password();
}
inline void ClientMoveMessage::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:ClientMoveMessage.Password)
}
inline std::string* ClientMoveMessage::mutable_password() {
  // @@protoc_insertion_point(field_mutable:ClientMoveMessage.Password)
  return _internal_mutable_password();
}
inline const std::string& ClientMoveMessage::_internal_password() const {
  return password_.Get();
}
inline void ClientMoveMessage::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClientMoveMessage::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientMoveMessage.Password)
}
inline void ClientMoveMessage::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientMoveMessage.Password)
}
inline void ClientMoveMessage::set_password(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientMoveMessage.Password)
}
inline std::string* ClientMoveMessage::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000001u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClientMoveMessage::release_password() {
  // @@protoc_insertion_point(field_release:ClientMoveMessage.Password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientMoveMessage::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientMoveMessage.Password)
}

// -------------------------------------------------------------------

// ClientCheckMessage

// required int32 Uid = 1;
inline bool ClientCheckMessage::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientCheckMessage::has_uid() const {
  return _internal_has_uid();
}
inline void ClientCheckMessage::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientCheckMessage::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientCheckMessage::uid() const {
  // @@protoc_insertion_point(field_get:ClientCheckMessage.Uid)
  return _internal_uid();
}
inline void ClientCheckMessage::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  uid_ = value;
}
inline void ClientCheckMessage::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:ClientCheckMessage.Uid)
}

// required string Password = 2;
inline bool ClientCheckMessage::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientCheckMessage::has_password() const {
  return _internal_has_password();
}
inline void ClientCheckMessage::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientCheckMessage::password() const {
  // @@protoc_insertion_point(field_get:ClientCheckMessage.Password)
  return _internal_password();
}
inline void ClientCheckMessage::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:ClientCheckMessage.Password)
}
inline std::string* ClientCheckMessage::mutable_password() {
  // @@protoc_insertion_point(field_mutable:ClientCheckMessage.Password)
  return _internal_mutable_password();
}
inline const std::string& ClientCheckMessage::_internal_password() const {
  return password_.Get();
}
inline void ClientCheckMessage::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClientCheckMessage::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientCheckMessage.Password)
}
inline void ClientCheckMessage::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClientCheckMessage.Password)
}
inline void ClientCheckMessage::set_password(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientCheckMessage.Password)
}
inline std::string* ClientCheckMessage::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000001u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClientCheckMessage::release_password() {
  // @@protoc_insertion_point(field_release:ClientCheckMessage.Password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientCheckMessage::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientCheckMessage.Password)
}

// -------------------------------------------------------------------

// Attributeitempro

// required int32 Id = 1;
inline bool Attributeitempro::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Attributeitempro::has_id() const {
  return _internal_has_id();
}
inline void Attributeitempro::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attributeitempro::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attributeitempro::id() const {
  // @@protoc_insertion_point(field_get:Attributeitempro.Id)
  return _internal_id();
}
inline void Attributeitempro::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void Attributeitempro::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Attributeitempro.Id)
}

// optional int32 Amount = 2;
inline bool Attributeitempro::_internal_has_amount() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Attributeitempro::has_amount() const {
  return _internal_has_amount();
}
inline void Attributeitempro::clear_amount() {
  amount_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attributeitempro::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attributeitempro::amount() const {
  // @@protoc_insertion_point(field_get:Attributeitempro.Amount)
  return _internal_amount();
}
inline void Attributeitempro::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  amount_ = value;
}
inline void Attributeitempro::set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:Attributeitempro.Amount)
}

// optional int32 Eltemtype = 3;
inline bool Attributeitempro::_internal_has_eltemtype() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Attributeitempro::has_eltemtype() const {
  return _internal_has_eltemtype();
}
inline void Attributeitempro::clear_eltemtype() {
  eltemtype_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attributeitempro::_internal_eltemtype() const {
  return eltemtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attributeitempro::eltemtype() const {
  // @@protoc_insertion_point(field_get:Attributeitempro.Eltemtype)
  return _internal_eltemtype();
}
inline void Attributeitempro::_internal_set_eltemtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  eltemtype_ = value;
}
inline void Attributeitempro::set_eltemtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eltemtype(value);
  // @@protoc_insertion_point(field_set:Attributeitempro.Eltemtype)
}

// repeated int32 attribute = 4;
inline int Attributeitempro::_internal_attribute_size() const {
  return attribute_.size();
}
inline int Attributeitempro::attribute_size() const {
  return _internal_attribute_size();
}
inline void Attributeitempro::clear_attribute() {
  attribute_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attributeitempro::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attributeitempro::attribute(int index) const {
  // @@protoc_insertion_point(field_get:Attributeitempro.attribute)
  return _internal_attribute(index);
}
inline void Attributeitempro::set_attribute(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  attribute_.Set(index, value);
  // @@protoc_insertion_point(field_set:Attributeitempro.attribute)
}
inline void Attributeitempro::_internal_add_attribute(::PROTOBUF_NAMESPACE_ID::int32 value) {
  attribute_.Add(value);
}
inline void Attributeitempro::add_attribute(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_attribute(value);
  // @@protoc_insertion_point(field_add:Attributeitempro.attribute)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Attributeitempro::_internal_attribute() const {
  return attribute_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Attributeitempro::attribute() const {
  // @@protoc_insertion_point(field_list:Attributeitempro.attribute)
  return _internal_attribute();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Attributeitempro::_internal_mutable_attribute() {
  return &attribute_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Attributeitempro::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:Attributeitempro.attribute)
  return _internal_mutable_attribute();
}

// -------------------------------------------------------------------

// Packagepro

// repeated .Attributeitempro Itempro = 1;
inline int Packagepro::_internal_itempro_size() const {
  return itempro_.size();
}
inline int Packagepro::itempro_size() const {
  return _internal_itempro_size();
}
inline void Packagepro::clear_itempro() {
  itempro_.Clear();
}
inline ::Attributeitempro* Packagepro::mutable_itempro(int index) {
  // @@protoc_insertion_point(field_mutable:Packagepro.Itempro)
  return itempro_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attributeitempro >*
Packagepro::mutable_itempro() {
  // @@protoc_insertion_point(field_mutable_list:Packagepro.Itempro)
  return &itempro_;
}
inline const ::Attributeitempro& Packagepro::_internal_itempro(int index) const {
  return itempro_.Get(index);
}
inline const ::Attributeitempro& Packagepro::itempro(int index) const {
  // @@protoc_insertion_point(field_get:Packagepro.Itempro)
  return _internal_itempro(index);
}
inline ::Attributeitempro* Packagepro::_internal_add_itempro() {
  return itempro_.Add();
}
inline ::Attributeitempro* Packagepro::add_itempro() {
  // @@protoc_insertion_point(field_add:Packagepro.Itempro)
  return _internal_add_itempro();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attributeitempro >&
Packagepro::itempro() const {
  // @@protoc_insertion_point(field_list:Packagepro.Itempro)
  return itempro_;
}

// -------------------------------------------------------------------

// Sqlplayerinfo

// required int32 Hp = 1;
inline bool Sqlplayerinfo::_internal_has_hp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Sqlplayerinfo::has_hp() const {
  return _internal_has_hp();
}
inline void Sqlplayerinfo::clear_hp() {
  hp_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sqlplayerinfo::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sqlplayerinfo::hp() const {
  // @@protoc_insertion_point(field_get:Sqlplayerinfo.Hp)
  return _internal_hp();
}
inline void Sqlplayerinfo::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  hp_ = value;
}
inline void Sqlplayerinfo::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Sqlplayerinfo.Hp)
}

// required int32 Attack = 2;
inline bool Sqlplayerinfo::_internal_has_attack() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Sqlplayerinfo::has_attack() const {
  return _internal_has_attack();
}
inline void Sqlplayerinfo::clear_attack() {
  attack_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sqlplayerinfo::_internal_attack() const {
  return attack_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sqlplayerinfo::attack() const {
  // @@protoc_insertion_point(field_get:Sqlplayerinfo.Attack)
  return _internal_attack();
}
inline void Sqlplayerinfo::_internal_set_attack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  attack_ = value;
}
inline void Sqlplayerinfo::set_attack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attack(value);
  // @@protoc_insertion_point(field_set:Sqlplayerinfo.Attack)
}

// required int32 Uid = 3;
inline bool Sqlplayerinfo::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Sqlplayerinfo::has_uid() const {
  return _internal_has_uid();
}
inline void Sqlplayerinfo::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sqlplayerinfo::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sqlplayerinfo::uid() const {
  // @@protoc_insertion_point(field_get:Sqlplayerinfo.Uid)
  return _internal_uid();
}
inline void Sqlplayerinfo::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  uid_ = value;
}
inline void Sqlplayerinfo::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:Sqlplayerinfo.Uid)
}

// repeated .Attributeitempro Inuse = 4;
inline int Sqlplayerinfo::_internal_inuse_size() const {
  return inuse_.size();
}
inline int Sqlplayerinfo::inuse_size() const {
  return _internal_inuse_size();
}
inline void Sqlplayerinfo::clear_inuse() {
  inuse_.Clear();
}
inline ::Attributeitempro* Sqlplayerinfo::mutable_inuse(int index) {
  // @@protoc_insertion_point(field_mutable:Sqlplayerinfo.Inuse)
  return inuse_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attributeitempro >*
Sqlplayerinfo::mutable_inuse() {
  // @@protoc_insertion_point(field_mutable_list:Sqlplayerinfo.Inuse)
  return &inuse_;
}
inline const ::Attributeitempro& Sqlplayerinfo::_internal_inuse(int index) const {
  return inuse_.Get(index);
}
inline const ::Attributeitempro& Sqlplayerinfo::inuse(int index) const {
  // @@protoc_insertion_point(field_get:Sqlplayerinfo.Inuse)
  return _internal_inuse(index);
}
inline ::Attributeitempro* Sqlplayerinfo::_internal_add_inuse() {
  return inuse_.Add();
}
inline ::Attributeitempro* Sqlplayerinfo::add_inuse() {
  // @@protoc_insertion_point(field_add:Sqlplayerinfo.Inuse)
  return _internal_add_inuse();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Attributeitempro >&
Sqlplayerinfo::inuse() const {
  // @@protoc_insertion_point(field_list:Sqlplayerinfo.Inuse)
  return inuse_;
}

// optional .Packagepro Package = 5;
inline bool Sqlplayerinfo::_internal_has_package() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || package_ != nullptr);
  return value;
}
inline bool Sqlplayerinfo::has_package() const {
  return _internal_has_package();
}
inline void Sqlplayerinfo::clear_package() {
  if (package_ != nullptr) package_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Packagepro& Sqlplayerinfo::_internal_package() const {
  const ::Packagepro* p = package_;
  return p != nullptr ? *p : reinterpret_cast<const ::Packagepro&>(
      ::_Packagepro_default_instance_);
}
inline const ::Packagepro& Sqlplayerinfo::package() const {
  // @@protoc_insertion_point(field_get:Sqlplayerinfo.Package)
  return _internal_package();
}
inline void Sqlplayerinfo::unsafe_arena_set_allocated_package(
    ::Packagepro* package) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(package_);
  }
  package_ = package;
  if (package) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Sqlplayerinfo.Package)
}
inline ::Packagepro* Sqlplayerinfo::release_package() {
  _has_bits_[0] &= ~0x00000001u;
  ::Packagepro* temp = package_;
  package_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Packagepro* Sqlplayerinfo::unsafe_arena_release_package() {
  // @@protoc_insertion_point(field_release:Sqlplayerinfo.Package)
  _has_bits_[0] &= ~0x00000001u;
  ::Packagepro* temp = package_;
  package_ = nullptr;
  return temp;
}
inline ::Packagepro* Sqlplayerinfo::_internal_mutable_package() {
  _has_bits_[0] |= 0x00000001u;
  if (package_ == nullptr) {
    auto* p = CreateMaybeMessage<::Packagepro>(GetArena());
    package_ = p;
  }
  return package_;
}
inline ::Packagepro* Sqlplayerinfo::mutable_package() {
  // @@protoc_insertion_point(field_mutable:Sqlplayerinfo.Package)
  return _internal_mutable_package();
}
inline void Sqlplayerinfo::set_allocated_package(::Packagepro* package) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete package_;
  }
  if (package) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(package);
    if (message_arena != submessage_arena) {
      package = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, package, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_ = package;
  // @@protoc_insertion_point(field_set_allocated:Sqlplayerinfo.Package)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Demo_2eproto
